{"ast":null,"code":"var _jsxFileName = \"/Users/kartik/Documents/GitHub/Ticket-Viewer/zcc-app/app/javascript/components/TicketList.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport React, { useEffect, useState } from 'react';\nimport Home from './Home';\nimport TicketDetails from './TicketDetails';\nimport './App.css';\nimport Table from 'react-bootstrap/Table';\nimport Container from 'react-bootstrap/Container';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Badge from 'react-bootstrap/Badge';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport moment from 'moment'; // TicketList Class based Component - Stateful\n\nvar TicketList = /*#__PURE__*/function (_React$Component) {\n  _inherits(TicketList, _React$Component);\n\n  var _super = _createSuper(TicketList);\n\n  function TicketList(props) {\n    var _this;\n\n    _classCallCheck(this, TicketList);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: [],\n      ticketid: '',\n      show: false,\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(TicketList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Runs after the first render() lifecycle\n      var url = \"http://localhost:3000/api/v1/base\";\n      fetch(url, {\n        \"method\": \"GET\"\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        _this2.setState({\n          data: response.tickets\n        });\n\n        _this2.setState({\n          loading: false\n        });\n      })[\"catch\"](function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var TagFormatter = function TagFormatter(cell, row) {\n        var tag = [];\n\n        for (var i = 0; i < cell.length; i++) {\n          tag.push( /*#__PURE__*/React.createElement(\"div\", {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(Badge, {\n            pill: true,\n            bg: \"secondary\",\n            text: \"light\",\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 22\n            }\n          }, \" \", cell[i], \" \")));\n        }\n\n        return tag;\n      };\n\n      var DateFormatter = function DateFormatter(cell, row) {\n        return moment(cell).format(\"MMM Do YYYY, h:mm:ss a\");\n      };\n\n      var columns = [{\n        dataField: \"id\",\n        text: \"ID\",\n        sort: true\n      }, {\n        dataField: \"subject\",\n        text: \"Subject\",\n        sort: true\n      }, {\n        dataField: \"status\",\n        text: \"Status\",\n        sort: true\n      }, {\n        dataField: \"tags\",\n        text: \"Tags\",\n        sort: true // formatter: TagFormatter,\n\n      }, {\n        dataField: \"created_at\",\n        text: \"Created\",\n        sort: true,\n        formatter: DateFormatter\n      }, {\n        dataField: \"updated_at\",\n        text: \"Updated\",\n        sort: true,\n        formatter: DateFormatter\n      }];\n      var sizePerPageList = [{\n        text: '5',\n        value: 5\n      }, {\n        text: '15',\n        value: 15\n      }, {\n        text: '25',\n        value: 25\n      }, {\n        text: 'All',\n        value: this.state.data.length\n      }];\n      var ticketEvent = {\n        onClick: function onClick(e, row, rowIndex) {\n          _this3.setState({\n            ticketid: row.id\n          });\n\n          _this3.setState({\n            show: true\n          });\n        }\n      };\n\n      var fromTicketDetail = function fromTicketDetail(childdata) {\n        _this3.setState({\n          show: childdata\n        });\n      };\n\n      return !this.state.loading ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(BootstrapTable, {\n        hover: true,\n        bootstrap4: true,\n        keyField: \"id\",\n        data: this.state.data,\n        columns: columns,\n        rowEvents: ticketEvent,\n        pagination: paginationFactory({\n          sizePerPage: 25,\n          sizePerPageList: sizePerPageList\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 7\n        }\n      })), this.state.show && /*#__PURE__*/React.createElement(TicketDetails, {\n        id: this.state.ticketid,\n        show: this.state.show,\n        onHide: function onHide() {\n          return _this3.setState({\n            show: false\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 26\n        }\n      })) : /*#__PURE__*/React.createElement(Container, {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        as: \"span\",\n        animation: \"grow\",\n        size: \"sm\",\n        role: \"status\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }\n      }), \" \", \"Loading...\"));\n    }\n  }]);\n\n  return TicketList;\n}(React.Component); /// TicketDetails Functional based Component - Stateless \n// function TicketList() {\n// \tconst [loading, setLoading] = React.useState(true);\n// \tconst [show, setShow] = React.useState(false);\n// \tconst [data, setData] = React.useState([]);\n// \tconst [ticketid, setId] = React.useState();\n// \tfunction TagFormatter(cell, row) {\n// \t\tvar tag = []\n// \t\tfor (var i = 0; i < cell.length; i++) {\n// \t\t    tag.push(<Badge pill bg=\"secondary\" text=\"light\">{ cell[i] } </Badge> );\n// \t\t}\n// \t\treturn (\n// \t\t\ttag\n// \t\t);\n// \t}\n// \tfunction DateFormatter(cell, row) {\n// \t\treturn\t(\n// \t\t\tmoment(cell).format(\"MMM Do YYYY, h:mm:ss a\")\n// \t\t)\n// \t}\n// \tconst columns = [\n// \t\t{\n// \t\t\tdataField: \"id\",\n// \t\t\ttext:\"ID\",\n// \t\t\tsort: true\t\n// \t\t},\n// \t\t{\n// \t\t\tdataField: \"subject\",\n// \t\t\ttext:\"Subject\",\n// \t\t\tsort: true\n// \t\t},\n// \t\t{\n// \t\t\tdataField: \"status\",\n// \t\t\ttext:\"Status\",\n// \t\t\tsort: true\n// \t\t},\n// \t\t{\n// \t\t\tdataField: \"tags\",\n// \t\t\ttext:\"Tags\",\n// \t\t\tsort: true,\n// \t\t\tformatter: TagFormatter,\n// \t\t},\n// \t\t{\n// \t\t\tdataField: \"created_at\",\n// \t\t\ttext:\"Created\",\n// \t\t\tsort: true,\n// \t\t\tformatter: DateFormatter,\n// \t\t},\n// \t\t{\n// \t\t\tdataField: \"updated_at\",\n// \t\t\ttext:\"Updated\",\n// \t\t\tsort: true,\n// \t\t\tformatter: DateFormatter,\n// \t\t},\n// \t]\n// \tconst sizePerPageList = [\n// \t\t{\n// \t\t  text: '5', value: 5\n// \t\t}, {\n// \t\t  text: '15', value: 15\n// \t\t}, {\n// \t\t  text: '25', value: 25\n// \t\t},\n// \t\t{\n// \t\t  text: 'All', value: data.length\n// \t\t}  \n// \t]\n// \tconst ticketEvent = {\n// \t\tonClick: (e, row, rowIndex) => {\n// \t\t     // console.log(`clicked on row with index: ${row.id}`);\n// \t\t     setId(row.id);\n// \t\t     setShow(true);\n// \t\t},\n// \t}\n// \tconst fromTicketDetail = (childdata) => {\n// \t    setShow(childdata);\n// \t }\n// \tuseEffect(()=>{\n// \t\tconst url = \"http://localhost:3000/api/v1/base\";\n// \t    \tfetch(url, {\n// \t\t\t  \"method\": \"GET\",\n// \t\t\t})\n// \t\t\t.then(response => response.json())\n// \t\t\t.then(response => {\n// \t\t\t  setData(response.tickets); \n// \t\t\t  setLoading(false);\n// \t\t\t})\n// \t\t\t.catch(err => { console.log(err); \n// \t\t\t})\n// \t}, []);\n// \treturn\t!loading ? \n// \t\t\t<>\n// \t\t\t\t<Container>\t\n// \t\t\t\t <BootstrapTable hover\n// \t\t\t        bootstrap4\n// \t\t\t        keyField=\"id\"\n// \t\t\t        data={data}\n// \t\t\t        columns={columns}\n// \t\t\t        rowEvents={ ticketEvent }\n// \t\t\t        pagination={paginationFactory({ sizePerPage: 25 , sizePerPageList: sizePerPageList})}\n// \t\t\t      />\n// \t\t\t\t</Container>\n// \t\t\t\t{show && <TicketDetails id={ticketid} show={show} onHide={() => setShow(false)}/>}\t\n// \t\t\t</>\n// \t\t\t:\n// \t\t\t<Container className=\"header\">\n// \t\t\t\t<Button variant=\"primary\" disabled>\n// \t\t\t    <Spinner\n// \t\t\t      as=\"span\"\n// \t\t\t      animation=\"grow\"\n// \t\t\t      size=\"sm\"\n// \t\t\t      role=\"status\"\n// \t\t\t      aria-hidden=\"true\"\n// \t\t\t    />\n// \t\t\t    {\" \"}\n// \t\t\t    Loading...\n// \t\t\t  </Button>\n// \t\t\t</Container>\n// }\n\n\nexport default TicketList;","map":{"version":3,"sources":["/Users/kartik/Documents/GitHub/Ticket-Viewer/zcc-app/app/javascript/components/TicketList.js"],"names":["React","useEffect","useState","Home","TicketDetails","Table","Container","ProgressBar","Badge","Spinner","Button","BootstrapTable","paginationFactory","moment","TicketList","props","state","data","ticketid","show","loading","url","fetch","then","response","json","setState","tickets","err","console","log","TagFormatter","cell","row","tag","i","length","push","DateFormatter","format","columns","dataField","text","sort","formatter","sizePerPageList","value","ticketEvent","onClick","e","rowIndex","id","fromTicketDetail","childdata","sizePerPage","Component"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react'\nimport Home from './Home'\nimport TicketDetails from './TicketDetails'\nimport './App.css'\n\nimport Table from 'react-bootstrap/Table';\nimport Container from 'react-bootstrap/Container';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Badge from 'react-bootstrap/Badge';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\n\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport moment from 'moment';\n\n// TicketList Class based Component - Stateful\n\nclass TicketList extends React.Component {\n\tconstructor(props) {\n\t    super(props);\n\t    this.state = {\n\t      data: [],\n\t      ticketid: '',\n\t      show: false,\n\t      loading: true\n\t    };\n\t}\n\n\tcomponentDidMount() {\n    \t// Runs after the first render() lifecycle\n    \tconst url = \"http://localhost:3000/api/v1/base\";\n\t    \tfetch(url, {\n\t\t\t  \"method\": \"GET\",\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(response => {\n\t\t\t  this.setState({data: response.tickets}); \n\t\t\t  this.setState({loading: false});\n\t\t\t})\n\t\t\t.catch(err => { console.log(err); \n\t\t\t})\n\t};\n\n\trender(){\n\t\tconst TagFormatter = (cell, row) =>{\n\n\n\t\t\t\n\t\t\tvar tag = [];\n\t\t\tfor (var i = 0; i < cell.length; i++) {\n\t\t\t    tag.push(<div><Badge pill bg=\"secondary\" text=\"light\"> { cell[i] } </Badge></div>); \n\t\t\t}\n\t\t\treturn (\n\t\t\t\ttag\n\t\t\t);\n\t\t};\n\n\t\tconst DateFormatter = (cell, row) => {\n\n\t\t\treturn\t(\n\t\t\t\tmoment(cell).format(\"MMM Do YYYY, h:mm:ss a\")\n\t\t\t)\n\t\t};\n\n\t\tconst columns = [\n\t\t\t{\n\t\t\t\tdataField: \"id\",\n\t\t\t\ttext:\"ID\",\n\t\t\t\tsort: true\t\n\t\t\t},\n\t\t\t{\n\t\t\t\tdataField: \"subject\",\n\t\t\t\ttext:\"Subject\",\n\t\t\t\tsort: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tdataField: \"status\",\n\t\t\t\ttext:\"Status\",\n\t\t\t\tsort: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tdataField: \"tags\",\n\t\t\t\ttext:\"Tags\",\n\t\t\t\tsort: true,\n\t\t\t\t// formatter: TagFormatter,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdataField: \"created_at\",\n\t\t\t\ttext:\"Created\",\n\t\t\t\tsort: true,\n\t\t\t\tformatter: DateFormatter,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdataField: \"updated_at\",\n\t\t\t\ttext:\"Updated\",\n\t\t\t\tsort: true,\n\t\t\t\tformatter: DateFormatter,\n\t\t\t},\n\t\t];\n\n\t\tconst sizePerPageList = [\n\t\t\t{\n\t\t\t  text: '5', value: 5\n\t\t\t}, {\n\t\t\t  text: '15', value: 15\n\t\t\t}, {\n\t\t\t  text: '25', value: 25\n\t\t\t},\n\t\t\t{\n\t\t\t  text: 'All', value: this.state.data.length\n\t\t\t}  \n\t\t];\n\n\t\tconst ticketEvent = {\n\n\t\t\tonClick: (e, row, rowIndex) => {\n\t\t\t     this.setState({ticketid: row.id});\n\t\t\t     this.setState({show: true});\n\t\t\t \n\n\t\t\t},\n\t\t};\n\n\t\tconst fromTicketDetail = (childdata) => {\n\t\t    this.setState({show: childdata});\n\t\t }\n\t\t\n\n\t\treturn (\n\t\t\t!this.state.loading ? \n\t\t\t\t<>\n\t\t\t\t\t\n\t\t\t\t\t<Container>\t\n\t\t\t\t\t <BootstrapTable hover\n\t\t\t\t        bootstrap4\n\t\t\t\t        keyField=\"id\"\n\t\t\t\t        data={this.state.data}\n\t\t\t\t        columns={columns}\n\t\t\t\t        rowEvents={ ticketEvent }\n\t\t\t\t        pagination={paginationFactory({ sizePerPage: 25 , sizePerPageList: sizePerPageList})}\n\t\t\t\t      />\n\t\t\t\t\t\n\t\t\t\t\t</Container>\n\n\t\t\t\t\t{this.state.show && <TicketDetails id={this.state.ticketid} show={this.state.show} onHide={() => this.setState({show: false})}/>}\t\n\t\t\t\t</>\n\t\t\t\t:\n\n\t\t\t\t<Container className=\"header\">\n\t\t\t\t\t<Button variant=\"primary\" disabled>\n\t\t\t\t    <Spinner\n\t\t\t\t      as=\"span\"\n\t\t\t\t      animation=\"grow\"\n\t\t\t\t      size=\"sm\"\n\t\t\t\t      role=\"status\"\n\t\t\t\t      aria-hidden=\"true\"\n\t\t\t\t    />\n\t\t\t\t    {\" \"}\n\t\t\t\t    Loading...\n\t\t\t\t  </Button>\n\t\t\t\t\t\n\t\t\t\t</Container>\n\n\n\t\t)\n\t}\n}\n\n\n/// TicketDetails Functional based Component - Stateless \n\n// function TicketList() {\n// \tconst [loading, setLoading] = React.useState(true);\n// \tconst [show, setShow] = React.useState(false);\n// \tconst [data, setData] = React.useState([]);\n// \tconst [ticketid, setId] = React.useState();\n\n// \tfunction TagFormatter(cell, row) {\n\n// \t\tvar tag = []\n// \t\tfor (var i = 0; i < cell.length; i++) {\n// \t\t    tag.push(<Badge pill bg=\"secondary\" text=\"light\">{ cell[i] } </Badge> );\n// \t\t}\n// \t\treturn (\n// \t\t\ttag\n// \t\t);\n// \t}\n\n// \tfunction DateFormatter(cell, row) {\n\n// \t\treturn\t(\n// \t\t\tmoment(cell).format(\"MMM Do YYYY, h:mm:ss a\")\n// \t\t)\n// \t}\n\n// \tconst columns = [\n// \t\t{\n// \t\t\tdataField: \"id\",\n// \t\t\ttext:\"ID\",\n// \t\t\tsort: true\t\n// \t\t},\n// \t\t{\n// \t\t\tdataField: \"subject\",\n// \t\t\ttext:\"Subject\",\n// \t\t\tsort: true\n// \t\t},\n// \t\t{\n// \t\t\tdataField: \"status\",\n// \t\t\ttext:\"Status\",\n// \t\t\tsort: true\n// \t\t},\n// \t\t{\n// \t\t\tdataField: \"tags\",\n// \t\t\ttext:\"Tags\",\n// \t\t\tsort: true,\n// \t\t\tformatter: TagFormatter,\n// \t\t},\n// \t\t{\n// \t\t\tdataField: \"created_at\",\n// \t\t\ttext:\"Created\",\n// \t\t\tsort: true,\n// \t\t\tformatter: DateFormatter,\n// \t\t},\n// \t\t{\n// \t\t\tdataField: \"updated_at\",\n// \t\t\ttext:\"Updated\",\n// \t\t\tsort: true,\n// \t\t\tformatter: DateFormatter,\n// \t\t},\n\n// \t]\n\n// \tconst sizePerPageList = [\n// \t\t{\n// \t\t  text: '5', value: 5\n// \t\t}, {\n// \t\t  text: '15', value: 15\n// \t\t}, {\n// \t\t  text: '25', value: 25\n// \t\t},\n// \t\t{\n// \t\t  text: 'All', value: data.length\n// \t\t}  \n// \t]\n\n// \tconst ticketEvent = {\n\n// \t\tonClick: (e, row, rowIndex) => {\n// \t\t     // console.log(`clicked on row with index: ${row.id}`);\n// \t\t     setId(row.id);\n// \t\t     setShow(true);\n\n// \t\t},\n// \t}\n\n// \tconst fromTicketDetail = (childdata) => {\n// \t    setShow(childdata);\n// \t }\n\n// \tuseEffect(()=>{\n\n// \t\tconst url = \"http://localhost:3000/api/v1/base\";\n// \t    \tfetch(url, {\n// \t\t\t  \"method\": \"GET\",\n// \t\t\t})\n// \t\t\t.then(response => response.json())\n// \t\t\t.then(response => {\n// \t\t\t  setData(response.tickets); \n// \t\t\t  setLoading(false);\n// \t\t\t})\n// \t\t\t.catch(err => { console.log(err); \n// \t\t\t})\n\n// \t}, []);\n\n// \treturn\t!loading ? \n// \t\t\t<>\n\t\t\t\t\n// \t\t\t\t<Container>\t\n// \t\t\t\t <BootstrapTable hover\n// \t\t\t        bootstrap4\n// \t\t\t        keyField=\"id\"\n// \t\t\t        data={data}\n// \t\t\t        columns={columns}\n// \t\t\t        rowEvents={ ticketEvent }\n// \t\t\t        pagination={paginationFactory({ sizePerPage: 25 , sizePerPageList: sizePerPageList})}\n// \t\t\t      />\n\t\t\t\t\n// \t\t\t\t</Container>\n\n// \t\t\t\t{show && <TicketDetails id={ticketid} show={show} onHide={() => setShow(false)}/>}\t\n// \t\t\t</>\n// \t\t\t:\n\n// \t\t\t<Container className=\"header\">\n// \t\t\t\t<Button variant=\"primary\" disabled>\n// \t\t\t    <Spinner\n// \t\t\t      as=\"span\"\n// \t\t\t      animation=\"grow\"\n// \t\t\t      size=\"sm\"\n// \t\t\t      role=\"status\"\n// \t\t\t      aria-hidden=\"true\"\n// \t\t\t    />\n// \t\t\t    {\" \"}\n// \t\t\t    Loading...\n// \t\t\t  </Button>\n\t\t\t\t\n// \t\t\t</Container>\n\n// }\n\n\nexport default TicketList"]},"metadata":{},"sourceType":"module"}